name: release

on:
  push:
    branches:
      - "!*"
    tags:
      - "**"
jobs:
  lint:
    name: Lint
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@main
      - uses: ./.github/actions/lint

  test:
    name: Test Suite
    needs: [lint]
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@main
      - uses: ./.github/actions/test

  build_and_upload_artifacts:
    name: Upload Artifacts
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows-msvc]
        include:
        - build: linux
          os: ubuntu-latest
          target: x86_64-unknown-linux
        - build: windows-msvc
          os: windows-latest
          target: x86_64-pc-windows-msvc
        - build: macos
          os: macos-latest
          target: aarch64-apple-darwin

    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
      - uses: actions/checkout@master
      - name: Set version
        id: set_version
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: echo "::set-output name=EPICK_VERSION::${GITHUB_REF#refs/tags/}"
      - name: Set version
        id: set_version_win
        if: matrix.os == 'windows-latest'
        run: echo "::set-output name=EPICK_VERSION::$(git describe --tags --abbrev=0)"
      - name: Set archive name
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        id: set_name
        run: echo "::set-output name=EPICK_ARCHIVE::epick-${{ steps.set_version.outputs.EPICK_VERSION}}-${{ matrix.target}}"
      - name: Set archive name
        if: matrix.os == 'windows-latest'
        id: set_name_win
        run: echo "::set-output name=EPICK_ARCHIVE::epick-${{steps.set_version_win.outputs.EPICK_VERSION}}-${{ matrix.target}}"
      - name: Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
      - run: cargo build --release
        name: Release build
      - name: Prepare archive directory
        run: mkdir epick
      - name: Move release files
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          mv target/release/epick epick/
      - name: Move release files
        if: matrix.os == 'windows-latest'
        run: |
          mv target/release/epick.exe epick/
      - name: Move other files
        run: |
          mv README.md epick/
          mv LICENSE epick/
      - name: Create archives
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          tar -zcvf ${{ steps.set_name.outputs.EPICK_ARCHIVE }}.tar.gz epick
          tar -Jcvf ${{ steps.set_name.outputs.EPICK_ARCHIVE }}.tar.xz epick
      - name: Create archives
        if: matrix.os == 'windows-latest'
        run: |
          7z a ${{ steps.set_name_win.outputs.EPICK_ARCHIVE }}.zip epick
      - name: Upload gz
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_name: vv9k/epick
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.set_name.outputs.EPICK_ARCHIVE }}.tar.gz
          asset_name: ${{ steps.set_name.outputs.EPICK_ARCHIVE }}.tar.gz
          tag: ${{ steps.set_version.outputs.EPICK_VERSION }}
          overwrite: true
      - name: Upload xz
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_name: vv9k/epick
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.set_name.outputs.EPICK_ARCHIVE }}.tar.xz
          asset_name: ${{ steps.set_name.outputs.EPICK_ARCHIVE }}.tar.xz
          tag: ${{ steps.set_version.outputs.EPICK_VERSION }}
          overwrite: true
      - name: Upload zip
        if: matrix.os == 'windows-latest'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_name: vv9k/epick
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.set_name_win.outputs.EPICK_ARCHIVE }}.zip
          asset_name: ${{ steps.set_name_win.outputs.EPICK_ARCHIVE }}.zip
          tag: ${{ steps.set_version_win.outputs.EPICK_VERSION }}
          overwrite: true
      - name: Install pkger
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -LO https://github.com/vv9k/pkger/releases/download/0.8.0/pkger-0.8.0-0.amd64.deb
          sudo dpkg -i pkger-0.8.0-0.amd64.deb
          /usr/bin/pkger init
          mkdir -p $HOME/.config/pkger/recipes/epick
          cp pkger.yml $HOME/.config/pkger/recipes/epick/recipe.yaml
      - name: Build RPM and DEB
        if: matrix.os == 'ubuntu-latest'
        run: /usr/bin/pkger build -s deb -s rpm -- epick
      - name: Upload deb
        if: matrix.os == 'ubuntu-latest'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_name: vv9k/epick
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: /home/runner/.config/pkger/output/pkger-deb/epick-${{steps.set_version.outputs.EPICK_VERSION}}-0.amd64.deb
          asset_name: pkger-${{steps.set_version.outputs.EPICK_VERSION}}-0.amd64.deb
          tag: ${{ steps.set_version.outputs.EPICK_VERSION }}
          overwrite: true
      - name: Upload rpm
        if: matrix.os == 'ubuntu-latest'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_name: vv9k/epick
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: /home/runner/.config/pkger/output/pkger-rpm/epick-${{steps.set_version.outputs.EPICK_VERSION}}-0.x86_64.rpm
          asset_name: epick-${{steps.set_version.outputs.EPICK_VERSION}}-0.x86_64.rpm
          tag: ${{ steps.set_version.outputs.EPICK_VERSION }}
          overwrite: true


